}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, theta_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
print(mu_grid_c)
print(sigma_grid_c)
dim(sigma_grid_c)
?pnorm
Pr <- pnorm(theta_grid, mu_grid_c, sigma_grid_c)
print(Pr)
max.print(Pr)
getOption("max.print")
print(theta_grid)
Pr <- pnorm(theta_grid, mu_grid_c, sigma_grid_c**(1/2))
print(Pr)
Pr <- pnorm(theta_grid, mu_grid_c, sigma_grid_c**(1/2))
print(Pr)
Pr <- pnorm(theta_eval, mu_grid_c, sigma_grid_c)
print(Pr)
Pr <- pnorm(0, mu_grid_c, sigma_grid_c)
print(Pr)
print(sigma_grid_c)
print(sigma_grid_c**(1/2))
print(sigma_grid_c)
source('C:/Users/Bruker/OneDrive/NTNU/5. semester/StatMod/StokMod_2/2a.R', echo=TRUE)
print(sigma_grid_c)
print(sigma_AB%*%solve(sigma_eval)%*%sigma_BA)
print(sigma_grid)
print(sigma_AB%*%solve(sigma_eval)%*%sigma_BA)
print(sigma_grid[1:10])
print((sigma_AB%*%solve(sigma_eval)%*%sigma_BA)[1:10])
print(a)
print(b)
print(sove(a))
print(solve(a))
a <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
print(a)
print(solve(a))
a <- matrix(c(2,0,0,0,2,0,0,0,2), nrow = 3)
print(a)
print(solve(a))
print(sigma_eval)
print(sigma_grid[sigma_grid <0])
print(sigma_AB[sigma_AB <0])
print(sigma_BA[sigma_BA <0])
print(sigma_eval[sigma_eval <0])
print(solve(sigma_eval)[solve(sigma)<0]
print(solve(sigma_eval)[solve(sigma_eval)<0]
print(solve(sigma_eval)[solve(sigma_eval)<0]
print(solve(sigma_eval)[solve(sigma_eval)<0])
print(solve(sigma_eval)[solve(sigma_eval)<0])
print((sigma_AB%*%solve(sigma_eval)%*%sigma_BA)[(sigma_AB%*%solve(sigma_eval)%*%sigma_BA)<0])
print(length((sigma_AB%*%solve(sigma_eval)%*%sigma_BA)))
print((sigma_grid - (sigma_AB%*%solve(sigma_eval)%*%sigma_BA))[(sigma_grid - (sigma_AB%*%solve(sigma_eval)%*%sigma_BA))<0])
print(length((sigma_grid - (sigma_AB%*%solve(sigma_eval)%*%sigma_BA)))
print(length((sigma_grid - (sigma_AB%*%solve(sigma_eval)%*%sigma_BA))))
print(length((sigma_grid - (sigma_AB%*%solve(sigma_eval)%*%sigma_BA))))
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5**2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
corr <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, theta_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
View(mu_grid_c)
View(sigma_grid_c)
?pnorm
?diag
var_grid_c <- diag(sigma_grid_c)
print(var_grid_c)
var_grid_c**(1/2)
View(sigma_grid_c)
print(diag(sigma_grid))
print(diag(sigma_AB%*%solve(sigma_eval)%*%sigma_BA))
print(diag(sigma_AB))
print(diag(sigma_BA))
print(diag(solve(sigma_eval)))
print(solve(sigma_eval))
print(sigma_eval)
print(var_grid_c)
print(var_grid_c**(1/2))
print(var_grid_c)
View(sigma_AB)
View(sigma_BA)
print(mu_grid_c)
#Nytt forsøk
mu_evalNew <- sapply(y_eval,EY)
sigma_evalNew <- sigma(y_eval)
sigma_AB_New <- corr(theta_grid, y_eval)
sigma_BA_New <- corr(y_eval, theta_grid)
mu_grid_c <- mu_c(mu_grid, sigma_AB_New, sigma_evalNew, y_eval, mu_evalNew)
mu_grid_cNew <- mu_c(mu_grid, sigma_AB_New, sigma_evalNew, y_eval, mu_evalNew)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, theta_eval, mu_eval)
sigma_grid_cNew <- sigma_c(sigma_grid, sigma_AB_New, sigma_evalNew, sigma_BA_New)
var_grid_cNew <- diag(sigma_grid_cNew)
print(var_grid_cNew)
#Nytt forsøk
mu_grid_cNew <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
sigma_grid_cNew <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_cNew <- diag(sigma_grid_cNew)
print(var_grid_cNew)
print(var_grid_c)
CorrY(0.35,0.3)
View(sigma_eval)
?pnorm
?ccf
print(ccf(theat_grid, theta_eval, plot = FALSE))
print(ccf(theata_grid, theta_eval, plot = FALSE))
print(ccf(theta_grid, theta_eval, plot = FALSE))
?pnorm
View(sigma_grid_c)
(var_grid_c)
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5**2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])*0.5**2
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
corr <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_c <- diag(sigma_grid_c)
print(solve(sigma_eval))
print(sigma_eval)
print(var_grid_c)
print(mu_grid_c)
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5**2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])*0.5**2
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
corr <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])*0.5**2
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_c <- diag(sigma_grid_c)
print(solve(sigma_eval))
print(sigma_eval)
print(var_grid_c)
print(mu_grid_c)
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5**2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])*0.5**2
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
corr <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])*0.5**2
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_c <- diag(sigma_grid_c)
print(var_grid_c)
print(mu_grid_c)
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5^2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])*0.5^2
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
corr <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])*0.5^2
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- corr(theta_grid, theta_eval)
sigma_BA <- corr(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_c <- diag(sigma_grid_c)
sd_grid_c <- (var_grid_c)^(1/2)
y_grid_c <- pnorm(theta_grid, mu_grid_c, sd_grid_c)
print(y_grid_c)
plot(theta_grid, y_grid_c)
#observated theta and y
theta_eval <- c(0.30,0.35,0.39,0.41,0.45)
y_eval <- c(0.5,0.32,0.40,0.35,0.60)
#mean, variance and correlation functions
EY <- function(theta){0.5}
VarY <- function(theta){0.5^2}
CorrY <- function(theta1,theta2){(1+15*abs(theta1-theta2))*exp(-15*abs(theta1-theta2))}
#function to create sigma matrix from theta vector
sigma <- function(x){
n <- length(x)
S <- matrix(0,nrow = n,ncol = n,byrow = TRUE)
for (i in 1:n) {
for (j in 1:n){
if (i == j){
S[i,j] <- VarY(x[i])
}else{
S[i,j] <- CorrY(x[i],x[j])*0.5^2
}
}
}
return(S)
}
#mu and sigma for observed data points
mu_eval <- sapply(theta_eval,EY)
sigma_eval <- sigma(theta_eval)
#gridpoints
theta_grid <- seq(from = 0.25, to = 0.5, by = 0.005 )
mu_grid <- sapply(theta_grid,EY)
sigma_grid <- sigma(theta_grid)
#functions to create conditional mean vector and covariance matrix
mu_c <- function(mu_A, sigma_AB, sigma_BB, x_B, mu_B){
return(mu_A + sigma_AB%*%solve(sigma_BB)%*%(x_B - mu_B))
}
sigma_c <- function(sigma_AA, sigma_AB, sigma_BB, sigma_BA){
return(sigma_AA - sigma_AB%*%solve(sigma_BB)%*%sigma_BA)
}
#function to create cross-covariance matrix
cross_cov <- function(x_A, x_B){
n <- length(x_A)
m <- length(x_B)
S <- matrix(0,nrow = n,ncol = m,byrow = TRUE)
for (i in 1:n){
for (j in 1:m){
S[i,j] = CorrY(x_A[i],x_B[j])*0.5^2
}
}
return(S)
}
#sigma_AB, A = grid, B = eval
sigma_AB <- cross_cov(theta_grid, theta_eval)
sigma_BA <- cross_cov(theta_eval, theta_grid)
#mu_grid_c: conditional mean vector of the process at the 51 grid points conditional on the 5 evaluation points
mu_grid_c <- mu_c(mu_grid, sigma_AB, sigma_eval, y_eval, mu_eval)
#sigma_grid_c: conditional covariance matrix of the process at the 51 grid points conditional on the 5 evaluation points
sigma_grid_c <- sigma_c(sigma_grid, sigma_AB, sigma_eval, sigma_BA)
var_grid_c <- diag(sigma_grid_c)
sd_grid_c <- (var_grid_c)^(1/2)
y_grid_c <- pnorm(theta_grid, mu_grid_c, sd_grid_c)
plot(theta_grid, y_grid_c)
?plot
?pnorm
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
lines(theta_grid, y_grid_c)
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
points(theta_grid, y_grid_c)
cdf_grid_c <- pnorm(theta_grid, mu_grid_c, sd_grid_c)
print(sum(cdf_grid_c))
print(sum(cdf_grid_c[theta_grid <0.30])
print(sum(cdf_grid_c[theta_grid <0.30]))
print(sum(cdf_grid_c[theta_grid <0.30]))
?pnorm
print(sum(dnorm(theta_grid, mu_grid_c, sd_grid_c)))
pdf_grid_c <- dnorm(theta_grid, mu_grid_c, sd_grid_c)
plot(theta_grid, pdf_grid_c)
pdf_grid_c <- dnorm(theta_grid)
plot(theta_grid, pdf_grid_c)
points(theta_grid, cdf_grid_c)
print(sum(cdf_grid_c[theta_grid <0.30]))
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
points(theta_grid, cdf_grid_c)
print(cdf_grid_c[theta_grid <0.30])
print(cdf_grid_c[theta_grid ==0.30])
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
points(theta_grid, mu_grid_c)
#b)
#Y(theta) < 0.30
cdf_grid_c <- pnorm(theta_grid, mu_grid_c, sd_grid_c)
print(cdf_grid_c[theta_grid ==0.30])
?plotmath
plotmath()
text(theta_grid)
text(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1), main = "%in%")
text(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1), main = "%in%")
?text
text("%in%")
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
text("%in%")
text(theta_grid, mu_grid_c, "%in%")
?legend
legend(title = "%in%")
legend(NULL, title = "%in%")
legend(NULL, legend = "%", title = "%in%")
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1))
legend(NULL, legend = "%", title = "%in%")
legend(NULL,NULL,  legend = "%", title = "%in%")
legend(theta_grid,mu_grid_c,  legend = "%", title = "%in%")
plot(NULL, NULL, xlim = c(0.25, 0.5), ylim = c(0,1), title = "'in'")
